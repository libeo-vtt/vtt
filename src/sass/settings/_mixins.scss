// ------------------------------ //
//             Mixins             //
// ------------------------------ //

@mixin headers {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    .h1,
    .h2,
    .h3,
    .h4,
    .h5,
    .h6 {
        @content;
    }
}

@mixin absolute-center {
    position: absolute;
    top: 50%;
    left: 50%;
    @include transform(translate(-50%, -50%));
}

@mixin absolute-vertical-center {
    position: absolute;
    top: 50%;
    @include transform(translateY(-50%));
}

@mixin absolute-horizontal-center {
    position: absolute;
    left: 50%;
    @include transform(translateX(-50%));
}

// Clearfix
@mixin clearfix {
    &:before,
    &:after {
        content: "";
        display: table;
        line-height: 0;
    }
    &:after {
        clear: both;
    }
}

// Visuallyhidden
@mixin visuallyhidden($hide: true) {
    @if $hide == true {
        position: absolute;
        overflow: hidden;
        clip: rect(0 0 0 0);
        width: 1px;
        height: 1px;
        margin: -1px;
        padding: 0;
        border: 0;
    } @else {
        overflow: visible;
        clip: auto;
        width: auto;
        height: auto;
        margin: 0;
    }
}

// reset-list-style
@mixin reset-list-style {
    margin: 0;
    padding: 0;
    font-size: 0;
    list-style-type: none;
    li {
        display: inline-block;
        margin: 0;
        padding: 0;
        font-size: 1rem;
    }
}

// Absolute position
@mixin absolute($top: auto, $right: auto, $bottom: auto, $left: auto) {
    position: absolute;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}

// Transition
@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}

// Calculate REM
@function rem($size) {
    $values: ();
    @if type-of($size) == list {
        @each $current in $size {
            $values: append($values, remove-px($current) / 16 * 1rem);
        }
    } @else {
        $values: remove-px($size) / 16 * 1rem;
    }
    @return $values;
}

// REM font-size
@mixin rem-fontsize($size) {
    font-size: remove-px($size) + px;
    font-size: rem($size);
}

// REM line-height
@mixin rem-lineheight($size) {
    line-height: remove-px($size) + px;
    line-height: rem($size);
}

// REM font-size and line-height
@mixin rem-typo($font, $line: 1.4) {
    font-size: remove-px($font) + px;
    font-size: rem($font);
    @if ($line == 1.4) {
        line-height: $line;
    } @else {
        line-height: remove-px($line) + px;
        line-height: rem($line);
    }
}

// Remove-px
@function remove-px($target) {
    @if not unitless($target) {
        @return $target / 1px ;
    } @else {
        @return $target;
    }
}

// Triangle
@mixin triangle($direction: up, $color:#000, $size:100px) {
    @if($direction == up) {
        width: 0;
        height: 0;
        border-width: 0 $size $size;
        border-style: solid;
        border-color: transparent transparent $color;
    }
    @if($direction == down) {
        width: 0;
        height: 0;
        border-width: $size;
        border-style: solid;
        border-color: $color transparent transparent;
    }
    @if($direction == left) {
        width: 0;
        height: 0;
        border-width: $size $size $size 0;
        border-style: solid;
        border-color: transparent $color transparent transparent;
    }
    @if($direction == right) {
        width: 0;
        height: 0;
        border-width: $size 0 $size $size;
        border-style: solid;
        border-color: transparent transparent transparent $color;
    }
}

// Placeholder
@mixin placeholder($color) {
    &::-webkit-input-placeholder,
    &:-ms-input-placeholder,
    &::-moz-placeholder,
    &:-moz-placeholder {
        color: $color;
    }
}

// Transform
@mixin transform($transforms) {
    -webkit-transform: $transforms;
    -moz-transform: $transforms;
    -ms-transform: $transforms;
    -o-transform: $transforms;
    transform: $transforms;
}

// Underline
@mixin underline($color: inherit, $weight: 1px, $offset: 2px) {
    text-decoration: none;
    background-image: linear-gradient(to top, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0) $offset, $color $offset, $color $offset + $weight, rgba(0, 0, 0, 0) $offset + $weight);
    &:hover {
        text-decoration: none;
    }
}

// Rotate
@mixin rotate($deg) {
    @include transform(rotate(#{$deg}deg));
}

// Scale
@mixin scale($scale) {
    @include transform(scale($scale));
}

// Translate
@mixin translate($x, $y) {
    @include transform(translate($x, $y));
}

// Skew
@mixin skew($x, $y) {
    @include transform(skew(#{$x}deg, #{$y}deg));
}

// Transform origin
@mixin transform-origin ($origin) {
    -webkit-transform-origin: $origin;
    -moz-transform-origin: $origin;
    -ms-transform-origin: $origin;
    -o-transform-origin: $origin;
    transform-origin: $origin;
}

// Border-radius
@mixin border-radius($radius) {
    background-clip: padding-box;
    -webkit-border-radius: $radius;
    border-radius: $radius;
}

@mixin border-top-radius($radius) {
    background-clip: padding-box;
    -webkit-border-top-left-radius: $radius;
    border-top-left-radius: $radius;
    -webkit-border-top-right-radius: $radius;
    border-top-right-radius: $radius;
}
@mixin border-right-radius($radius) {
    background-clip: padding-box;
    -webkit-border-top-right-radius: $radius;
    border-top-right-radius: $radius;
    -webkit-border-bottom-right-radius: $radius;
    border-bottom-right-radius: $radius;
}
@mixin border-bottom-radius($radius) {
    background-clip: padding-box;
    -webkit-border-bottom-right-radius: $radius;
    border-bottom-right-radius: $radius;
    -webkit-border-bottom-left-radius: $radius;
    border-bottom-left-radius: $radius;
}
@mixin border-left-radius($radius) {
    background-clip: padding-box;
    -webkit-border-top-left-radius: $radius;
    border-top-left-radius: $radius;
    -webkit-border-bottom-left-radius: $radius;
    border-bottom-left-radius: $radius;
}

// Emify
@function emify($target, $base: 16) {
    $values: ();
    $baseFixed: remove-px($base);
    @if type-of($target) == list {
        // $values will return element with type list
        @each $t in $target {
            $tFixed: remove-px($t);
            $values: append($values, if(type-of($tFixed) == number, ($tFixed / $baseFixed) + em, $tFixed));
        }
    } @else {
        // $values will return element with type number
        $values: (remove-px($target) / $baseFixed) + em;
    }
    @return $values;
}

// Respond-to
@mixin respond-to($breakpoint) {
    $existingBreakpoint: false;
    @if variable-exists(breakpoints) {
        @each $currentBreakpoint in $breakpoints {
            $bp-name: nth(nth($currentBreakpoint, 1), 2);
            @if $bp-name == $breakpoint {
                $existingBreakpoint: true;
                $bp-min: nth(nth($currentBreakpoint, 2), 2);
                $bp-max: nth(nth($currentBreakpoint, 3), 2);
                @if $bp-min == null and $bp-max != null {
                    @media (max-width: $bp-max) {
                        @content;
                    }
                }
                @else if $bp-min != null and $bp-max == null {
                    @media (min-width: $bp-min) {
                        @content;
                    }
                } @else {
                    @media (min-width: $bp-min) and (max-width: $bp-max) {
                        @content;
                    }
                }
            }
        }
    }
    @if $existingBreakpoint == false {
        @if type-of($breakpoint) == list {
            @media (min-width: nth($breakpoint, 1)) and (max-width: nth($breakpoint, 2)) {
                @content;
            }
        }
        @else if $breakpoint == "retina" {
            @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
                @content;
            }
        }
        @else if $breakpoint == "document-width" {
            @media (max-width: $document-width) {
                @content;
            }
        }
        @else {
            @media (max-width: $breakpoint) {
                @content;
            }
        }
    }
}

// Grid
@mixin grid($horizontal-gutter, $vertical-gutter, $margin, $iterations: 4, $vertical-align: top) {
    margin: $margin;
    font-size: 0;
    @if $horizontal-gutter == 0 {
        $horizontal-gutter: $horizontal-gutter * 1px;
    }
    @if $vertical-gutter == 0 {
        $vertical-gutter: $vertical-gutter * 1px;
    }
    > .grid-wrapper {
        position: relative;
        margin: 0 floor($horizontal-gutter / 2 * -1);
        &:before,
        &:after {
            content: "";
            height: 1px;
            display: block;
        }
        &:before {
            margin-bottom: floor(($vertical-gutter + 1) / 2 * -1);
        }
        &:after {
            margin-top: floor(($vertical-gutter + 1) / 2 * -1);
        }
        .ie & {
            margin: 0 floor(($horizontal-gutter - 1px) / 2 * -1);
        }
    }
    > .grid-wrapper > [class^="col"] {
        display: inline-block;
        vertical-align: $vertical-align;
        margin: floor($vertical-gutter / 2) floor($horizontal-gutter / 2);
        font-size: 1rem;
        @include transition(all, 150ms);
    }
    @for $i from 1 through $iterations {
        $current: $i;
        @for $i from 1 through $current {
            > .grid-wrapper > .col-#{$i}-#{$current} {
                width: calc(100% / #{$current} * #{$i} - #{$horizontal-gutter});
            }
            @if variable-exists(breakpoints) {
                @each $breakpoint in $breakpoints {
                    $bp-name: nth(nth($breakpoint, 1), 2);
                    $bp-min: nth(nth($breakpoint, 2), 2);
                    $bp-max: nth(nth($breakpoint, 3), 2);
                    @if $bp-min == null and $bp-max != null {
                        @media (max-width: $bp-max) {
                            > .grid-wrapper > [class^="col"].col-#{$i}-#{$current}-#{$bp-name} {
                                width: calc(100% / #{$current} * #{$i} - #{$horizontal-gutter});
                            }
                        }
                    }
                    @else if $bp-min != null and $bp-max == null {
                        @media (min-width: $bp-min) {
                            > .grid-wrapper > [class^="col"].col-#{$i}-#{$current}-#{$bp-name} {
                                width: calc(100% / #{$current} * #{$i} - #{$horizontal-gutter});
                            }
                        }
                    } @else {
                        @media (min-width: $bp-min) and (max-width: $bp-max) {
                            > .grid-wrapper > [class^="col"].col-#{$i}-#{$current}-#{$bp-name} {
                                width: calc(100% / #{$current} * #{$i} - #{$horizontal-gutter});
                            }
                        }
                    }
                }
            }
        }
    }
}

@function strip-units($number) {
    @return $number / ($number * 0 + 1);
}
